# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # specify the version
      - image: circleci/golang:1.9
    # environment:
    #   PACKAGE_PATH: ${GOPATH}/src/extract-blocks
    #   # Specify service dependencies here if necessary
    #   # CircleCI maintains a library of pre-built images
    #   # documented at https://circleci.com/docs/2.0/circleci-images/
    #   # - image: circleci/postgres:9.4
    # #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    working_directory: /go/src/github.com/{{CIRCLE_USERNAM}}/{{REPO_NAME}}
    steps:
      - checkout
      # - run: env
      - restore_cache:
          keys:
            - v1-pkg-cache
      # specify any bash command here prefixed with `run: `
      ## - run: go get -v -t -d ./...
      ## - run: go test -v ./...
      # - go get -v
      # - go build -v
      # - go build -v -o $(basename $PWD) main.go
      - run: ls
      - run: env
      - run: go install ./html2xslx
      - run: cd vendor/github.com/rakyll/gotest/; go install .
      - save_cache:
          key: v1-pkg-cache
          paths:
            - "/go/pkg"
      - run: ./bin/upx --best --lzma "${GOPATH}/bin/html2xlsx"
      - run:
          name: Run all tests
          command: |
            extract-blocks tests/jan.zip
            gotest -v ./...
      # - run:
      #     name: Publish on Github
      #     # BB_AUTH_STRING=<bb_user_name>:<APP Password>
      #     command: |
      #       go get github.com/tcnksm/ghr
      #       OUTPUT="${GOPATH}/bin/extract-blocks"
      #       if [ "${CIRCLE_BRANCH}" != "master" ] ; then
      #         OUTPUT="${OUTPUT}-${CIRCLE_BRANCH}"
      #         mv "${GOPATH}/bin/extract-blocks" "${OUTPUT}"
      #       fi
      #       VERSION=$(html2xslx --version)
      #       ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/
